version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/preservation_catalog
    docker:
    - image: circleci/buildpack-deps:stretch
jobs:
  test:
    docker:
    - image: circleci/ruby:2.5.3-node
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        POSTGRES_HOST: 127.0.0.1
        PGUSER: postgres
        PGPASSWORD: sekret
        RAILS_ENV: test
        NOKOGIRI_USE_SYSTEM_LIBRARIES: true
    - image: circleci/postgres:11
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: test
        POSTGRES_PASSWORD: sekret
    - image: circleci/redis:3
    steps:
    - checkout

    # Upgrade bundler
    - run:
        name: Install Bundler
        command: gem install bundler

    # Which version of bundler?
    - run:
        name: Which bundler?
        command: bundle -v

    # Restore bundle cache
    - restore_cache:
        keys:
        - preservation-catalog-bundle-v2-{{ checksum "Gemfile.lock" }}
        - preservation-catalog-bundle-v2-

    - run:
        name: Bundle Install
        command: bundle check || bundle install

    # Store bundle cache
    - save_cache:
        key: preservation-catalog-bundle-v2-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle

    - run:
        name: Wait for DB
        command: dockerize -wait tcp://localhost:5432 -timeout 1m

    - run:
        name: Test prepare
        command: bin/rails db:reset

    - run:
        name: Check styles using rubocop
        command: bundle exec rubocop

    # Run rspec in parallel
    - run:
        name: Run rspec in parallel
        command: |
          bundle exec rspec

    - run:
        name: Validate API specification
        command: |
          sudo npm install -g openapi-enforcer-cli
          result=$(openapi-enforcer validate openapi.yml)
          [[ $result =~ "Document is valid" ]] && {
          echo "Validation good"
          exit 0
          } || {
          echo $result
          exit 1
          }
    # Save test results for timing analysis
    - store_test_results:
        path: test_results

  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          docker build -t $IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: |
          docker save -o app_image.tar $IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
        - ./app_image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $IMAGE_NAME:latest
  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/app_image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
          docker push $IMAGE_NAME:$CIRCLE_TAG
workflows:
  version: 2

  test:
    jobs:
    - test

  build:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
